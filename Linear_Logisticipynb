{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Hello, Colaboratory",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/stanimman/Lectures/blob/master/Linear_Logisticipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "9J7p406abzgl"
      },
      "cell_type": "markdown",
      "source": [
        "<img height=\"60px\" src=\"https://colab.research.google.com/img/colab_favicon.ico\" align=\"left\" hspace=\"20px\" vspace=\"5px\">\n",
        "\n",
        "<h1>Welcome to Colaboratory!</h1>\n",
        "Colaboratory is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud. See our [FAQ](https://research.google.com/colaboratory/faq.html) for more info."
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "-Rh3-Vt9Nev9"
      },
      "cell_type": "markdown",
      "source": [
        "## Getting Started\n",
        "- [Overview of Colaboratory](/notebooks/basic_features_overview.ipynb)\n",
        "- [Loading and saving data: Local files, Drive, Sheets, Google Cloud Storage](/notebooks/io.ipynb)\n",
        "- [Importing libraries and installing dependencies](/notebooks/snippets/importing_libraries.ipynb)\n",
        "- [Using Google Cloud BigQuery](/notebooks/bigquery.ipynb)\n",
        "- [Forms](/notebooks/forms.ipynb), [Charts](/notebooks/charts.ipynb), [Markdown](/notebooks/markdown_guide.ipynb), & [Widgets](/notebooks/widgets.ipynb)\n",
        "- [TensorFlow with GPU](/notebooks/gpu.ipynb)\n",
        "- [TensorFlow with TPU](/notebooks/tpu.ipynb)\n",
        "- [Machine Learning Crash Course](https://developers.google.com/machine-learning/crash-course/): [Intro to Pandas](/notebooks/mlcc/intro_to_pandas.ipynb) & [First Steps with TensorFlow](/notebooks/mlcc/first_steps_with_tensor_flow.ipynb)\n",
        "- [Using Colab with GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "1fr51oVCHRZU"
      },
      "cell_type": "markdown",
      "source": [
        "## Highlighted Features\n",
        "### Seedbank\n",
        "\n",
        "Looking for Colab notebooks to learn from? Check out [Seedbank](https://tools.google.com/seedbank/), a place to discover interactive machine learning examples."
      ]
    },
    {
      "metadata": {
        "id": "kYmNMVlxOiKp",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        ""
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "9wi5kfGdhK0R"
      },
      "cell_type": "markdown",
      "source": [
        "### Linear Regression"
      ]
    },
    {
      "metadata": {
        "id": "UQnF25HaPYgW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "040a214d-5b56-4bf5-c05f-cfc17ec8e056"
      },
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/jdwittenauer/ipython-notebooks.git"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cloning into 'ipython-notebooks'...\n",
            "remote: Enumerating objects: 613, done.\u001b[K\n",
            "remote: Total 613 (delta 0), reused 0 (delta 0), pack-reused 613\u001b[K\n",
            "Receiving objects: 100% (613/613), 33.01 MiB | 33.37 MiB/s, done.\n",
            "Resolving deltas: 100% (309/309), done.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ENveYEmhP34g",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "1d549cc2-4932-4219-8ebd-3529d4c1eba9"
      },
      "cell_type": "code",
      "source": [
        "!ls ipython-notebooks/data"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "bird_small.mat\t  ex3data1.mat\t  ex7data1.mat\t       movie_ids.txt\n",
            "bird_small.png\t  ex3weights.mat  ex7data2.mat\t       spamSample1.txt\n",
            "emailSample1.txt  ex4data1.mat\t  ex7faces.mat\t       spamSample2.txt\n",
            "emailSample2.txt  ex4weights.mat  ex8data1.mat\t       spamTest.mat\n",
            "ex1data1.txt\t  ex5data1.mat\t  ex8data2.mat\t       spamTrain.mat\n",
            "ex1data2.txt\t  ex6data1.mat\t  ex8_movieParams.mat  stock_data.csv\n",
            "ex2data1.txt\t  ex6data2.mat\t  ex8_movies.mat       vocab.txt\n",
            "ex2data2.txt\t  ex6data3.mat\t  manning.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "e35lfrDZPdHY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "5bc33561-9548-43ca-c1e0-14678571ad64"
      },
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path = 'ipython-notebooks/data/ex1data1.txt'\n",
        "data = pd.read_csv(path, header=None, names=['Years_of_Experience', 'Salary_in_lakhs'])\n",
        "data.head()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Years_of_Experience</th>\n",
              "      <th>Salary_in_lakhs</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6.1101</td>\n",
              "      <td>17.5920</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.5277</td>\n",
              "      <td>9.1302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8.5186</td>\n",
              "      <td>13.6620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.0032</td>\n",
              "      <td>11.8540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.8598</td>\n",
              "      <td>6.8233</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Years_of_Experience  Salary_in_lakhs\n",
              "0               6.1101          17.5920\n",
              "1               5.5277           9.1302\n",
              "2               8.5186          13.6620\n",
              "3               7.0032          11.8540\n",
              "4               5.8598           6.8233"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "metadata": {
        "id": "lmVRdH8OQxKY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 514
        },
        "outputId": "189ae09e-d304-43c7-fa42-6482eed21b84"
      },
      "cell_type": "code",
      "source": [
        "data.plot(kind='scatter', x='Years_of_Experience', y='Salary_in_lakhs', figsize=(12,8))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff71409b1d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nmhYuXKhnn33W//hpp50mr9crSTr77LP1xRdfqGPHjvL5fJoyZYokqba2VieffLIkyTAMnXPOOY2u\nm5eXp5qaGrlcLn/9paWlkqRf/epXkqTu3burrKxMkrR9+3ZdffXVkg5vb7ts2TL985//bHK8AcBO\nvBMBwP/p1KmTUlNTdcopp0iS3G63TjrppEY3/tXW1mrmzJl68cUX1aNHDz311FPauXOn//EjfcYe\nj0fPPfecCgoK9NZbb+myyy7Thg0b1LVr16DXPxI2jzAMo9G5Y7nvvvua7GHev3+/3G63Dhw44G/r\n+PHHHxtdz+1268wzz9Sjjz4a8Pq6ujpJh8elIbfbrUcffVQdO3Zs9FhCQkKjcy6XK+DaR35GsPEG\nALuxrBwANKFXr14qKSnRF198IUl67733tHHjRlVUVCgxMVHdu3dXdXW13njjDdXW1jZ6/ccff6zN\nmzerb9++mjZtmk4//XR99dVXTV6vf//+evvttyUdvhHxgw8+0JlnnhmW/5aNGzcqLS1N999/vxYs\nWOCvd9euXdq3b58kadu2bTrttNPUr18/ffTRR9q/f78k6dVXX9Wbb75p+vPPPvts/e1vf5N0OJgv\nXbrU9PlnnXWWtm7dKkn66quvNGXKlCbHGwDsxgwzADTB4/Fo+fLlmjt3rtq3by+Xy6W77rpLXbp0\nUUZGhsaNG6fu3bvr2muv1dy5c5WTkxPw+h49eujhhx/Wc889J7fbrVNOOcU0AP/617/WRx99pMsv\nv1w//vijRo0apf79+/tndkPRsCVDkrKysvTYY49p48aN6tixowYPHqwHH3xQgwcPVu/evbV8+XJ9\n/fXX6ty5sy699FJ5PB7NnTtX1157rTwejzwezzGXplu8eLEWL16sF198UbW1tZo2bZrp86+++mot\nXLhQEyZM0I8//qgZM2Y0Od4AYDeWlQOAOPXuu+/6V7kAADSNGWYAiKDXXntN69evb3S+TZs2+stf\n/mL62oMHD+qGG24I+tgNN9ygIUOGhKVGAEAgZpgBAAAAE9z0BwAAAJggMAMAAAAmCMwAAACACQIz\nAAAAYILADAAAAJggMAMAAAAm/j+RU+s7u5U7nQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7ff71408a320>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "PpwOy3tNS7nI",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "# set X (training data) and y (target variable)\n",
        "cols = data.shape[1]\n",
        "X = data.iloc[:,0:cols-1]\n",
        "y = data.iloc[:,cols-1:cols]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "hVktPoSeTjPV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X = np.matrix(X.values)\n",
        "y = np.matrix(y.values)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "oYZkU7ZN3CL0",
        "outputId": "e6967a16-fe1f-4368-afd1-aec2b919327e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "from sklearn import linear_model\n",
        "model = linear_model.LinearRegression()\n",
        "model.fit(X, y)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
              "         normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "metadata": {
        "id": "zzNO_wG8Tx6Y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "a0b1d68b-8136-45e3-84da-92e00e12bc33"
      },
      "cell_type": "code",
      "source": [
        "x = np.array(X[:, 0].A1)\n",
        "x"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 6.1101,  5.5277,  8.5186,  7.0032,  5.8598,  8.3829,  7.4764,\n",
              "        8.5781,  6.4862,  5.0546,  5.7107, 14.164 ,  5.734 ,  8.4084,\n",
              "        5.6407,  5.3794,  6.3654,  5.1301,  6.4296,  7.0708,  6.1891,\n",
              "       20.27  ,  5.4901,  6.3261,  5.5649, 18.945 , 12.828 , 10.957 ,\n",
              "       13.176 , 22.203 ,  5.2524,  6.5894,  9.2482,  5.8918,  8.2111,\n",
              "        7.9334,  8.0959,  5.6063, 12.836 ,  6.3534,  5.4069,  6.8825,\n",
              "       11.708 ,  5.7737,  7.8247,  7.0931,  5.0702,  5.8014, 11.7   ,\n",
              "        5.5416,  7.5402,  5.3077,  7.4239,  7.6031,  6.3328,  6.3589,\n",
              "        6.2742,  5.6397,  9.3102,  9.4536,  8.8254,  5.1793, 21.279 ,\n",
              "       14.908 , 18.959 ,  7.2182,  8.2951, 10.236 ,  5.4994, 20.341 ,\n",
              "       10.136 ,  7.3345,  6.0062,  7.2259,  5.0269,  6.5479,  7.5386,\n",
              "        5.0365, 10.274 ,  5.1077,  5.7292,  5.1884,  6.3557,  9.7687,\n",
              "        6.5159,  8.5172,  9.1802,  6.002 ,  5.5204,  5.0594,  5.7077,\n",
              "        7.6366,  5.8707,  5.3054,  8.2934, 13.394 ,  5.4369])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "metadata": {
        "id": "4gY4VQ7WSwVC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 529
        },
        "outputId": "97ec138f-9c75-48e9-bc86-51751abc7876"
      },
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "x = np.array(X[:, 0].A1) # A1 change the shape and flattenns the matrix\n",
        "f = model.predict(X).flatten()\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(12,8))\n",
        "ax.plot(x, f, 'r', label='Prediction')\n",
        "ax.scatter(data.Years_of_Experience, data.Salary_in_lakhs, label='Traning Data')\n",
        "ax.legend(loc=2)\n",
        "ax.set_xlabel('Years_of_Experience')\n",
        "ax.set_ylabel('Salary_in_lakhs')\n",
        "ax.set_title('Predicted Salary_in_lakhs vs. Years_of_Experience')"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5,1,'Predicted Salary_in_lakhs vs. Years_of_Experience')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nGl9//bXh8XiMmTNnGrt27Yri6LqWrVu3GkuXLm1127hx42I0msT1zTffGLNmzTIWL15sPPfcc4Zh\nGMaCBQuMv/zlL4ZhGMYDDzxgvPDCC60es3XrVuP66683DMMwSktLjSuuuCK6g04QZnN79913G3/+\n858NwzCM559/NwWKogAADEVJREFU3vj1r3/d6jGB3kNwnNn8zp8/39i4caPlY/jbDY7Z3J5owYIF\nxo4dO1rd9uqrrxr3339/tIaY0DZv3mz89Kc/NQzDMKqqqoyJEyfyvhsmZnMbT++7lGQEYd++ferV\nq5f69eunpKQkTZw4UZs3b471sBLWo48+qptvvjnWw0h4LpdLq1evVn5+vv+2rVu36sILL5QkTZo0\nqd3f6ebNmzVlyhRJ0qBBg1RTU6P6+vroDTpBmM3tPffco4svvliSlJ2drSNHjsRqeAnPbH4D4W83\nOHZz+9VXX6muro7VzU44++yztWrVKklSVlaWGhoaeN8NE7O5jaf3XQLzCUpLS3XjjTdq5syZ2rRp\nk//28vJy5eTk+H/OyclReXl5LIaY8Hbu3Kl+/fq1+kpFkpqamjR37lxdeeWVeuaZZ2I0usSSnJys\ntLS0Vrc1NDT4vwrMzc1t93daUVGh7Oxs/8/8LZszm9uMjAw5nU55PB6tWbNG06ZNa/c4q/cQtGY2\nv5L0/PPP65prrtEdd9yhqqqqVtf42w2O1dxK0h/+8AfNmjXL9No//vEPzZkzRz/5yU/0+eefR3KI\nCc3pdCojI0OS9Morr+j888/nfTdMzOY2nt53qWH+1sCBA1VUVKSpU6dq3759uuaaa/T222+3q0NC\n57zyyiu67LLL2t1+9913a/r06XI4HJo1a5bGjh2rESNGxGCEXYcRxKn3wdwHx3k8Ht19990655xz\ndO6557a6xntI5/zwhz9U7969dcYZZ+jJJ5/UI488oiVLlljen7/d0DQ1Nemjjz7S0qVL210bNWqU\ncnJydMEFF2j79u2aP3++3njjjegPMoFs2LBBr7zyip5++mlddNFF/tt53+28E+dWip/3XVaYv9W3\nb19dcsklcjgcGjBggPr06aPDhw9LkvLz81VRUeG/7+HDh0P6KhHHbd26VYWFhe1unzlzpnr06KGM\njAydc845KikpicHoEl9GRoYaGxslmf+dtv1bLisra7faD2sLFy7UqaeeqqKionbX7N5DENi5556r\nM844Q5I0efLkdu8B/O12zocffmhZijFo0CD/BsvCwkJVVVXJ4/FEcXSJ5b333tPvfvc7rV69Wj17\n9uR9N4zazq0UP++7BOZvrV+/Xk899ZSkYyUYlZWV6tu3rySpoKBA9fX12r9/v1paWvTOO+9owoQJ\nsRxuQjp8+LB69OjR7pPfV199pblz58owDLW0tOjjjz/273hFaMaPH6+33npLkvT222/rvPPOa3V9\nwoQJ/uufffaZ8vPzlZmZGfVxJqL169crJSVFt912m+V1q/cQBHbrrbdq3759ko59sG77HsDfbud8\n+umnOv30002vrV69Wn/6058kHeuwkZOTQ5ciC3V1dVq+fLmeeOIJf0cX3nfDw2xu4+l912Hw3YAk\nqb6+XvPmzVNtba2am5tVVFSkyspK9ezZU9///vf14YcfauXKlZKkiy66SHPmzInxiBNPcXGxfvvb\n3+r3v/+9JOnJJ5/U2WefrcLCQq1YsUJbtmxRUlKSJk+eTEujIBQXF+vXv/61Dhw4oOTkZPXt21cr\nV67UggUL5Ha71b9/f913331KSUnRHXfcofvuu09paWlauXKltm3bJofDoXvuucfy/0S7M7O5rays\nVGpqqv//6AYNGqSlS5f657alpaXde8jEiRNj/C+JT2bzO2vWLD355JNKT09XRkaG7rvvPuXm5vK3\nGyKzuX344Yf18MMPa8yYMbrkkkv8973pppv0+OOP69ChQ7rrrrv8ixa0PbO2du1aPfzww/rOd77j\nv+3+++/X4sWLed/tJLO5/frrr5WVlRUX77sEZgAAAMAGJRkAAACADQIzAAAAYIPADAAAANggMAMA\nAAA2CMwAAACADU76A9DtPfHEEyopKdEDDzzgv23dunV69dVX9dxzz8VwZMfdeuutOnDggB5//HHL\nPqPnn3++TjrpJKWmpvpv69evn5YvXx6RMRUXF+v111/Xf/7nf0bk+QEgXtBWDkC319zcrMsuu0xL\nlizRuHHjVFdXp+nTp+upp57SaaedFuvhyev16owzzlBxcbFSUlIs73f++edrzZo1KigoiOLoAKDr\nY4UZQLeXkpKipUuX6uc//7lee+01rVq1Sv/xH/+h0047TZs3b9ajjz4qwzDkcrl077336uSTT9ab\nb76pZ555Ri6XS4ZhaPny5erfv79mzpypESNG6PPPP9ezzz6rRYsWae/evZKkM888U4sXL7Ych8fj\n0bJly/TFF19Ikr73ve+pqKhIixYtkiTNnj1bK1euDPkkq9raWv3oRz/S008/rYKCAs2bN09jxozR\nqaeeqkcffVR9+/bVgQMH1Lt3bz3wwAPKzMzUn//8Z73wwgsyDEO5ubm69957lZmZqfHjx2v69OlK\nSkrSBRdcoMcff1zPPfec9u/fr1/84hdqaGhQQ0OD5s6dq3PPPVfz5s3TySefrC+//FL//Oc/NWPG\nDM2ePVtHjx7VwoUL/cfYzps3T2PHjrWcbwCIKQMAYBiGYSxcuNBYuHChMXXqVMPtdhv19fXGRRdd\nZNTU1BiGYRhvvvmmcfvttxuGYRh//OMfjYMHDxqGYRiPPPKIsWLFCsMwDOPKK680HnroIcMwDGPH\njh3GD37wA//zv/jii0ZdXZ3l67/22mvGTTfdZBiGYTQ3NxuXXXaZsW3bNqO5udkYOnRowPGfd955\nxr59+0yvvfvuu8b1119vbNq0yZg9e7ZhGIaxadMmY+TIkUZZWZlhGIZxxx13GM8//7yxb98+Y/r0\n6Ybb7TYMwzCeeuopY/ny5UZzc7MxbNgw44MPPvA/ftasWYZhGMbs2bONDz/80DAMwzh06JAxadIk\nw+PxGHPnzjXmzp1rGIZh7Nmzxxg3bpxhGIaxatUqY+XKlYZhGEZpaakxf/582/kGgFhihRkAvnXX\nXXfpwgsv1G9+8xu5XC4VFxeroqJCt9xyi6RjK8DJycfeNnNzc/3HCZeXl2vs2LH+5yksLJQkDRky\nRD169ND111+vSZMmaerUqf4jXs3s3LlT48ePlyQlJydrzJgx+vTTTzVq1Kig/w133nlnqxrm6dOn\n68c//rEmTpyoN998U4sXL9aLL77ovz5s2DDl5eVJkkaPHq3du3crKytL5eXlmjNnjiSpqalJp556\nqiTJMAyNGTOm3etu3bpVbrdbDofDP/7q6mpJ0ne/+11JUv/+/XXkyBFJ0o4dO3TttddKOnbc7f33\n36+PP/7Ycr4BIJZ4JwKAb2VnZ6t3794aOHCgJMnlcqmgoKDdxr+mpibNnTtXr7/+ugYMGKBnn31W\nu3bt8l/31Rmnp6frpZdeUnFxsd59911dfvnlWrt2rfr06WP6+r6w6WMYRrvbAnnwwQcta5grKyvl\ncrlUVVXlL+vwer3tXs/lcumss87SY4891urxLS0tko7NS1sul0uPPfaYsrKy2l1zOp3tbnM4HK1e\n2/ccZvMNALFGWzkAsDBo0CCVlZVp9+7dkqQtW7bo5ZdfVl1dnZKTk9W/f381NDRo48aNampqavf4\nnTt3at26dTrzzDNVVFSk008/XXv27LF8vVGjRun999+XdGwj4rZt23TWWWeF5d/y8ssvKz8/X7/5\nzW+0aNEi/3hLS0tVUVEhSfroo480bNgwjRw5Up988okqKyslSX/5y1/0zjvv2D7/6NGj9de//lXS\nsWB+33332d6/sLBQ7733niRpz549mjNnjuV8A0CsscIMABbS09O1YsUKzZ8/X2lpaXI4HFq2bJly\nc3N18cUX60c/+pH69++v6667TvPnz9fbb7/d6vEDBgzQI488opdeekkul0sDBw60DcD//u//rk8+\n+URXXnmlvF6vLrnkEo0aNcq/shuMtiUZkrR8+XL9/ve/18svv6ysrCyNHz9eDz30kMaPH68hQ4Zo\nxYoV2rt3r3JycjRt2jSlp6dr/vz5uu6665Senq709PSAremWLFmiJUuW6PXXX1dTU5OKiops73/t\ntddq8eLFuuqqq+T1enXnnXdazjcAxBpt5QCgm/rggw/8XS4AANZYYQaAKHrzzTf1wgsvtLs9KSlJ\n//Vf/2X72G+++UY33nij6bUbb7xREyZMCMsYAQCtscIMAAAA2GDTHwAAAGCDwAwAAADYIDADAAAA\nNgjMAAAAgA0CMwAAAGCDwAwAAADY+P+UotjWnJ6FEwAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7ff713d0c5f8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "A6QpS7tGYEjJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "9cc3e93d-7cc8-4378-858f-fd38ef79f6b3"
      },
      "cell_type": "code",
      "source": [
        "path = 'ipython-notebooks/data/ex1data2.txt'\n",
        "data2 = pd.read_csv(path, header=None, names=['Size', 'Bedrooms', 'Price'])\n",
        "data2.head()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Size</th>\n",
              "      <th>Bedrooms</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2104</td>\n",
              "      <td>3</td>\n",
              "      <td>399900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1600</td>\n",
              "      <td>3</td>\n",
              "      <td>329900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2400</td>\n",
              "      <td>3</td>\n",
              "      <td>369000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1416</td>\n",
              "      <td>2</td>\n",
              "      <td>232000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3000</td>\n",
              "      <td>4</td>\n",
              "      <td>539900</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Size  Bedrooms   Price\n",
              "0  2104         3  399900\n",
              "1  1600         3  329900\n",
              "2  2400         3  369000\n",
              "3  1416         2  232000\n",
              "4  3000         4  539900"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "metadata": {
        "id": "anSm0jetcNmN",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# set X (training data) and y (target variable)\n",
        "cols = data2.shape[1]\n",
        "X = data2.iloc[:,0:cols-1]\n",
        "y = data2.iloc[:,cols-1:cols]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "vnXiLw1kca91",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X = np.matrix(X.values)\n",
        "y = np.matrix(y.values)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "1-Jp0jKAchrf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "ef63161f-0e02-46cc-a298-c1f17d748384"
      },
      "cell_type": "code",
      "source": [
        "from sklearn import linear_model\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "model = linear_model.LinearRegression()\n",
        "model.fit(X, y)"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
              "         normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "metadata": {
        "id": "4KKVudqjclN4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "74bdc01f-9ead-432b-b41a-be4a8466dfb4"
      },
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X)\n",
        "# The coefficients\n",
        "print('Coefficients: \\n', model.coef_)\n",
        "# The mean squared error\n",
        "print(\"Mean squared error: %.2f\"\n",
        "      % mean_squared_error(y, y_pred))\n",
        "print('Variance score: %.2f' % r2_score(y, y_pred))"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Coefficients: \n",
            " [[  139.21067402 -8738.01911233]]\n",
            "Mean squared error: 4086560101.21\n",
            "Variance score: 0.73\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "DJjn9gKL1278",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "## Logistic "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "d4mRDTcmn_aK",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_digits\n",
        "digits = load_digits()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "3nHBRZLkoywQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "e96af8da-ab67-4173-a786-fab8c3380f19"
      },
      "cell_type": "code",
      "source": [
        "# Print to show there are 1797 images (8 by 8 images for a dimensionality of 64)\n",
        "print( 'Image Data Shape' , digits.data.shape)\n",
        "# Print to show there are 1797 labels (integers from 0–9)\n",
        "print('Label Data Shape' , digits.target.shape)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Image Data Shape (1797, 64)\n",
            "Label Data Shape (1797,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "5kJpT-B1pK2e",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "a677d6e3-0b7c-4cbd-8564-71c0ee7cb6b6"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np \n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(20,4))\n",
        "for index, (image, label) in enumerate(zip(digits.data[0:5], digits.target[0:5])):\n",
        " plt.subplot(1, 5, index + 1)\n",
        " plt.imshow(np.reshape(image, (8,8)), cmap=plt.cm.gray)\n",
        " plt.title('Training: %i\\n' % label, fontsize = 20)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABHcAAAEKCAYAAACYK7mjAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3X2UXOldH/hv2xMHg7Gk4c2wxsjt\nwAOOJtIgZRfvAqMBTXACrATHks/GC9bERLOsYUe8SrwEaYCzSMRgOZAsmhOvNFnCLiPCtjgxLB5x\nLEgwBEaxZkcJPCyjEWAMGK9awmZ5M9T+UT220JG66+mu23Xv6PM5Z06rq3/PU78u1bf76je3bs2N\nRqMAAAAAMEwvmHUDAAAAAKye4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnu\n9EwpZX8pZVRK2b/K9edLKd7fHqZILqGfZBP6STahn2Tz+e2uWTfQR6WUo0mOTFj+87XWnVO8+3cl\n2ZvkV1e5/kiST5peO9NTSnl1ku9Ocl+Slyb5rSQ/muRYrfXPZ9kb/SeX3SmlfEqS00lem+SRWuvR\nmTbEoMhmN0op9+SjvzNfkuT3kvxMku+qtb5/lr0xDLLZjVLKlyb5n5JsTXJ3xtn82SRHa63vm2Vv\nDINsdq+UMpfx93pfkgdrradn29H6MNy5tceTXLrptkeSvDrJP05y7Ybb/3Cad1xr/a2Mhx6rXf/z\nU2xnakopfzvJu5P8SZK3JHlvkp1Jjib53CR7ZtUbgyGXHVg6SD2V5MWz7oXBks0pK6Xcl+Rckj9I\n8v0Z/+PxviQHkuwqpWyrtX5ohi0yDLI5ZaWUh5OcSPJkku9N8scZZ/Nrkrx2KZtXZ9giwyCb3fua\njLN5R5kbjZxVNYlSyvmMnyCfWmv9/Rm3MzillJ9NsivJtlrr0zfcfiLJw0l211p/alb9MUxyuTal\nlC9J8n9lfJDxr5OcjTN3mALZXJtSSk3yaUm2LB2IP3f7W5McTPLmWuu/mFV/DJdsrt7SWa6/k+Q/\nJ/kvbzzr/Ibj2W+stb51Ri0yYLI5PaWUlyX5tSTPJrk3ztyh1dLrFk8l+aok25O8Mcnba63fsvT1\nv5vkUMah3ZDx/4X7D0n+Sa213mKfjzwJSylXknx4ad+3JPnyjE8DfSbJ99Raf+yG9eeT3FdrnVv6\nfGfGp6T9k6WP35fxkzxJ/n3GB4iXb1j/8Un+5ySvS7IxydNJviPJK5L8y5v6eq7Xb6u1HlvmsfnU\nJA8k+bkbBztLfjjjX4ZflcRwh6mSy9vncsnHJPnaWuuPLPUE60I2l/2d+fFL9/VbNw52lvx0xsOd\nv3O79bAWsrns782/sXT///EWlxN4IuPj2Vcssx5WTTZXPKa90Q8l+aul+znTsG7wDHem7/VJNmX8\nWtz/J0lKKduS/HySD2T8hP/9JH8r4wO0v1dKuafW+jsr7PuCJO/IOKjfnuQTknxLkv+tlPLrtdb/\nuML6v7PU08kkb0/y+RmfrvZv8tEAJsmPJfmyjP8P/juSfHqS/z3j08NXa0eSuSS/dPMXaq2/WUq5\nmuS/WsP+sBK5vIVa69m1rIcpkM2b1Fo/mORNt/nyhqWPf7Ta/WFCsnmTWut7kxy/zZc/e+nj/73a\n/WFCsrmMUsp/m/Hg6GsyfjzuKIY70/d5SV5Va73xwGtLkl9JcuTG1ymWUv4gyY9kPHn93hX2fWWS\nn6m1vvmG9b+f5F9lfL2alQL3uiSvqbX+h6XPHyulzCf5olLKfK31cinlczMO2y/UWj9yDZxSyhMZ\n/8C42Y8lWcj4OjrL2bz08b23+fpvJ9lWSrmr1vrhFfaC1ZBL6CfZbPM/JBllfCAMXZLNZZRS7sr4\nQuefmOQrMv6+z2X8RiHQJdm8jaWzgv55kl9I8r/mDrzmjuHO9D1xU9hSa/3R3PDDfumJ98IkV5Zu\n2jzh3j940+fPXeX8UydY+4s3hO3G9V+0tP5ykvuXbv+xG4tqrf+ulPKLGU9gb7z9z5NM8i5XH7/0\n8f+7zdf/+Ia6xQn2g1ZyCf0kmxMqpXxvki9O8kO11vesdh+YkGwu7/MzfglKMj6O/a4kb6m1/mXj\nPtBKNm/v+5J8cpIHaq2jUkrD0ucHw53pe/bmG5beiu1rM36Xi5LxdS5uNMnfw1/mowF9zp8uffwb\nE6x/5ha33bx+89LH37xF7S/npsDBgMgl9JNsrqCU8oKMrx/wP2Z8Gvs3TmNfWIFsLu9ixv9Q3bT0\n8buTfEkpZV+t9Y57KQjrSjZvoZTymowfg++ttf76avcZOsOd6fvgLW777iTfmfFVu7854yf0n2X8\ndnf/fMJ9P7zG/xvwpyuX5GOXPt7qDJvra7jv56bLH3ebr79k6eOtHjuYBrmEfpLNZZRSPi7jl2B9\necYXlTzg5cusE9lcRq31WpLzS5/+n6WUn8v45SPHc/trZsE0yOZNSikvyvhizL+Z8UWU71iGOx1b\nek3uwxm/3OgLb5zml1L+5swau7U/W/p487Q3SV66hn2fu0L6y2/z9c9I8qwDVtaLXEI/yeZHLQ12\n3pnkv8743U5Wul4CdEY2l1drPVtK+UCS13axP9yObCYZv0vY5yT575J80g0vx/qkpY+bSikvT3K1\n1nq7y4Q8L7xg1g3cAT4x42vJPHWL0zS/cAb9LOd3lz5+xi2+9nlr2PdXMn57vf/m5i+UUrZk/DZ4\n/34N+0MruYR+ks185GD93yR5TZKvMdihB+74bJZS3lhK+YNSyj+6xddekPHj43+cs97u+GxmfD26\nuST/R5LfueG/x5e+/oNLn+9bw30MguFO9/7fjF/D+Iql10MmSUop9yT575c+ffEsGruFdy99/GtP\n/FLKF+TWg5kXlVI2rjQVXvpB81NJdpZS7r3py9+09PFfrq5lWJU7PpfQU7I59h1JviTJN9Va377m\nTmHtZDN5KuOLtX5dKeXma5C8PsnfTPKLq2sZVk02k2/L+OXLN//37UtfP7H0+VTebr3PTJc7Vmv9\ni1LKTybZm+RHSyk/k+QzM74w4huSvCPJF5dS9mc8AJml80meTPL3Syn/OuMAbE7yjzN+zf8bbqr/\nhxlfA+DbkhxbYe9vyXh6/LOllLckeV/Gp66+Icnba62/MJ1vAVYml2OllPvy0VNW//bSx1eXUl63\n9Oc/rrX+zBr7h4nJZlJK+ZSMTzF/f5L33pDHG8km60o2k1rrxVLKv8j4e/7VUspjSa4m2ZHxhWw/\nlOTINL8RWIlsJrXWX7rV7aWUDy398ala679dS+ND4cyd9fG1Gb893a6ML2r1BUm+otb6zowvgPWi\nJN+f5O6ZdZik1jrKeKr540m+NMnbMu71K5P8p6WyVV1oq9Z6OePrBpxP8q1J3p7kczO+6NdDa+kb\nVumOz2WSR5KcWfrv6NJte2+47X9Z5b6wFnd6Nj8n4//L+skZn1J+5hb/ySazcKdnM7XWNyf5qowH\nOUczPvP8K5bua0et9em19A6rdMdnk7G50Wg06x4YgFLKD2T89qv/wP8thH6QS+gn2YR+kk3oJ9mc\nDi/L4iNKKS/O+IyaP621/qMbbv+YjP9v/l8k+dUZtQd3JLmEfpJN6CfZhH6Sze4Z7vARtdY/WXrr\nuAdLKXcnWcj41PA3Jfn0JN9/i6uwAx2SS+gn2YR+kk3oJ9nsnuEON3tjkqczfj3xD2d8XaZfT/Lm\neI0/zIpcQj/JJvSTbEI/yWaHXHMHAAAAYMC8WxYAAADAgBnuAAAAAAyY4Q4AAADAgBnuAAAAAAyY\n4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnuAAAA\nAAyY4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnu\nAAAAAAyY4Q4AAADAgBnuAAAAAAzYXdPecG5ubtRS//TTT+eee+6Zdhurtnfv3qb6t7zlLfnmb/7m\nieuPHTvW2lKTc+fONdW/7nWvy0/8xE80rTl8+HBTfavFxcWJa/v2/EmS0Wg0N+sebmXo2WzV2v/5\n8+e7aybJxo0bm+o/67M+K7/xG7/RtObIkSNN9a3Onj07cW0fnz+y2Q+t/e/cubO7ZpIsLCw01b/k\nJS/Jhz70oaY1Fy9ebKpv1fIY9fH5I5vdOHToUFP9wYMHc+LEiYnruz6mvXz5clP9y1/+8rz3ve9t\nWrNjx46m+laOaadv6LlcjZbvofV4s9Xp06eb19x///1517veNXH9nj17mu+jS317Di2Xy5mfubNl\ny5ZZt7Amr3jFK2bdwprcfffds25hTYb+/OmzoT+2Q+//xS9+8axbWJOhP/59NvTHduj9v/CFL5x1\nC2sy9Me/z4b+2L7sZS+bdQtr8qIXvWjWLazJ0J8/ffV8eFyH/j289KUvnXULazKkx3/mwx0AAAAA\nVs9wBwAAAGDADHcAAAAABsxwBwAAAGDADHcAAAAABsxwBwAAAGDADHcAAAAABuyuSYpKKW9N8nlJ\nRkkerrX+aqddASuSS+gn2YR+kk3oJ9mE6VjxzJ1Syn1JPrPW+pokb0ryzzrvCliWXEI/ySb0k2xC\nP8kmTM8kL8v64iQLSVJr/bUkm0opL+20K2Alcgn9JJvQT7IJ/SSbMCWTvCzrZUku3PD5Hy7d9ke3\nKn766aezZcuWpiZGo1FTfd88/vjjs27hIw4cOND5mtXcR5f69PyZm5tbr7tqymVyZ2Zz6P1v3bq1\nqX5hYaGjTlanT4+/bPbL0PvfsGFDU/19993XUSdjrY9nnx5/2eyXY8eOzbqFj5ifn+98zdWrV5vv\no0t9ev70NZt3Yi6T4X8Pu3fvnri2j99rH3u6lYmuuXOTZZN+zz33NG02Go3W84fHivbu3dtU//jj\nj2ffvn0T13f9S/PcuXNN9QcOHMijjz7atObw4cNN9a0WFxcnru3b82eGVnwQhp7NVq39nz9/vrtm\nkmzcuLGpfuvWrXnqqaea1hw5cqSpvtXZs2cnrh3682eKZPMmrf3v3Lmzu2bSPhTdsGFDrl+/3rTm\n4sWLTfWtWh6joT9/puh5n81Dhw411R87dqzpGK/rY9rLly831c/Pzzev2bFjR1N9K8e0q/K8/rfm\narR8D63Hm61Onz7dvGb37t1Nx5B79uxpvo8u9e05tNygaZKXZb0v4+npcz4tye+tsSdgbeQS+kk2\noZ9kE/pJNmFKJhnuvDPJ65KklPK5Sd5Xa/1gp10BK5FL6CfZhH6STegn2YQpWXG4U2t9d5ILpZR3\nZ3z18jd33hWwLLmEfpJN6CfZhH6STZieia65U2vt9iIrQDO5hH6STegn2YR+kk2YjklelgUAAABA\nTxnuAAAAAAyY4Q4AAADAgBnuAAAAAAyY4Q4AAADAgBnuAAAAAAzYRG+Ffic5duxYp2vm5+eb92+x\nadOmztdcvXq1+T5a7Nu3r6l+7969TfVnzpxpqufOcO3atU73v++++5rXbN26tan+/vvvb76PFmfP\nnu10f4Zp27Ztna5517ve1bx/i+vXr3e6f5Js3ry58/tgeFZzzNmi9fgoSQ4cODBx7UMPPdS8f4uT\nJ082r2k9zt6+fXvzfbQ4d+5cp/vDzfbv39/p/hcvXmxes3v37lWto50zdwAAAAAGzHAHAAAAYMAM\ndwAAAAAGzHAHAAAAYMAMdwAAAAAGzHAHAAAAYMAMdwAAAAAGzHAHAAAAYMAmGu6UUraUUp4ppXxd\n1w0Bk5NN6CfZhH6STegn2YS1W3G4U0r5uCQ/lOTnum8HmJRsQj/JJvSTbEI/ySZMxyRn7vxZkn+Q\n5H0d9wK0kU3oJ9mEfpJN6CfZhCmYG41GExWWUo4m+UCt9YeXq7t06dJoy5YtU2gNhmdubi6j0Whu\nPe9TNmFlsgn9JJvQT33NplxCbpvLu6Z9T/fcc09T/Wg0ytzcuv7cWNYzzzzTVD8/P5/Lly831Xfp\nzJkzTfV79+5d1Zou7du3b+Laxx9/vKk+aX+Mni+Gns1Wrf0vLCx02E2ye/fuTvdPkre97W2d7n/w\n4MGJa4f+/FlPQ8/mtm3bmurf85735N57722q79L169eb6jds2NC85tq1a031rTZv3jxxbd+eP33W\ndTaPHTvW2lKT1uO11mPa48ePt7bU5OTJk53unyQPPPBAp/ufO3du4lrZnMzQf2euRsv30HKsthob\nN25sXnPkyJE88sgjE9cfPXq0+T661Lfn0HIn53i3LAAAAIABM9wBAAAAGLAVX5ZVStme5AeSbE7y\nF6WU1yX5ylrr1Y57A5Yhm9BPsgn9JJvQT7IJ07HicKfWeiHJzu5bAVrIJvSTbEI/ySb0k2zCdHhZ\nFgAAAMCAGe4AAAAADJjhDgAAAMCAGe4AAAAADJjhDgAAAMCAGe4AAAAADNiKb4XeN9u3b+90//n5\n+U7XvOpVr2rev8Xly5eb6kejUfbt29e05oknnmiqb9X6d9xaf+bMmaZ6+mHbtm2drtm5c2fz/n1z\n8eLFWbfAHWjPnj2drnnqqaea92+xsLDQVH/kyJGcOHGieQ3c7NFHH+10/+PHjzfVX716NTt27Ji4\n/sknn2xtqUnrMe38/HzzmnPnzjXVw1pt3Lix03X79+9f1f6Tav3995wrV65MXLt58+ZV3UeXWnpq\n+V6nzZk7AAAAAANmuAMAAAAwYIY7AAAAAANmuAMAAAAwYIY7AAAAAANmuAMAAAAwYIY7AAAAAANm\nuAMAAAAwYHdNUlRK+f4kX7BU/3211p/stCtgIrIJ/SSb0D9yCf0kmzAdK565U0q5P8mWWutrkrw2\nyYnOuwJWJJvQT7IJ/SOX0E+yCdMzycuyfiHJ3qU/X0vycaWUF3bXEjAh2YR+kk3oH7mEfpJNmJIV\nX5ZVa/3LJH+89Ombkvz00m3ADMkm9JNsQv/IJfSTbML0zI1Go4kKSym7k3x7kr9Xa71+u7pLly6N\ntmzZMqX2YFjm5uYyGo3m1vM+ZRNWJpvQT+udzUlzmcgmd7a+ZlMuIbfN5UTDnVLKlyT5niSvrbVe\nXfae5uYmmxYtGY1GmZub/OfG9u3bW7Zv9uSTT3a6/6te9apO9798+XJTfevjnyRPPPFEU32rCxcu\nTFx76NChHD9+vGn/w4cPt7bUZJ1/EfYmm13btm1bU/173vOe3HvvvRPXnz9/vrGjNhs2bOh0/yR5\n8MEHO93/9OnTE9f27fmTyGZXjh492lR/5MiRPPLIIxPX79mzp7GjNgsLC031rf0/t6ZLLc+Hvj1/\nkvXLZksuk+6zOT8/37J9s8XFxab6q1ev5u677564vutj5lbz8/PNx8FdH5e3kM0743fmxo0bm9cs\nLi5m06ZNE9V2fTx74kT7JZFOnTrVdIza9ffQ6tlnn80rX/nKieuvXLnSXTNZPpcrviyrlLIhyT9N\nsmuSX4TA+pBN6CfZhP6RS+gn2YTpmeSt0F+f5BOTPF5Kee62r661/nZnXQGTkE3oJ9mE/pFL6CfZ\nhCmZ5ILKjyZ5dB16ARrIJvSTbEL/yCX0k2zC9EzyVugAAAAA9JThDgAAAMCAGe4AAAAADJjhDgAA\nAMCAGe4AAAAADJjhDgAAAMCArfhW6H2zadOmTve/cOFCU/327dub1ly+fLm1pd5pfYy4Mxw8eLDT\n/Y8ePdq85vz58xPXbtiwoXn/vmn5fmFaTpw40VR/5MiRpjVXrlxp7KhNa/9J+8+7s2fPNt8Hz39d\nHxPOz883r2k5zl7N/i3OnTvXVD8/P9/8mHb974rFxcVO92d49u/f3+m6zZs3r2r/SZ0+fbp5zalT\np5rWreb3cotr1641r2n5e1vNv1mmxZk7AAAAAANmuAMAAAAwYIY7AAAAAANmuAMAAAAwYIY7AAAA\nAANmuAMAAAAwYIY7AAAAAANmuAMAAAAwYHetVFBK+dgkp5N8SpKPSfI9tdZ/23FfwDLkEvpJNqGf\nZBP6STZheiY5c+fLkzxZa70vyb4kP9htS8AE5BL6STahn2QT+kk2YUpWPHOn1vrjN3z66Une2107\nwCTkEvpJNqGfZBP6STZhelYc7jynlPLuJC9P8mXdtQO0kEvoJ9mEfpJN6CfZhLWbG41GExeXUrYl\n+VdJttZab7nw0qVLoy1btkypPRiWubm5jEajufW8z0lymcgmdzbZhH6STeinvmZTLiG3zeWKw51S\nyvYk76+1/s7S5/85yc5a6/tvueHc3OTToiSj0Shzc5P/3Ni1a1fL9s2OHTvWVL99+/ZcuHBh4vod\nO3a0ttSp1sc/aX+MunTo0KEcP368ac3hw4c76mZsPX4RtuYy6T6bBw8ebNm+2dGjR5vqN2zYkOvX\nrzfVD90rX/nKTve/cuXKxLWr+dnStTs1m13buHFjU/3i4mI2bdo0cf2ePXtaW2py4sSJpvrWny1J\ncv78+ab6Vi2PUd+eP4lsdmV+fr6p/plnnsmrXvWqpvounTt3rql+165dzWv27dvXVN9qcXFx4tq+\nPX+SfmZz6LlczfHyW9/61nzDN3zDRLWtx8utWn/nJ+1/B62/l1tdu3atqf7IkSN55JFHJq7v+u9g\nuVxOckHlL0zyTUlSSvmUJC9J8oHptAasklxCP8km9JNsQj/JJkzJJMOdH0nyyaWUf5fkHUneXGv9\nq27bAlYgl9BPsgn9JJvQT7IJUzLJu2X9SZJ/uA69ABOSS+gn2YR+kk3oJ9mE6ZnkzB0AAAAAespw\nBwAAAGDADHcAAAAABsxwBwAAAGDADHcAAAAABsxwBwAAAGDAVnwr9L7ZtGlTp/ufO3euqX779u3N\na4au67+DxcXFTvenGydOnOh0/9OnTzfVLy4uZvPmzU31Q7dx48ZZt0APdf28OHjwYKdr9uzZ07x/\n3+zfv3/WLXAHunz5cqdr7r777ub9WzzxxBPNa1qPUVdzHy0eeOCBpvrW/p8Pxy59s3v37k73f+tb\n39rpuscee2xV+/fJww8/3On+Dz74YPOaK1euTL+RDjhzBwAAAGDADHcAAAAABsxwBwAAAGDADHcA\nAAAABsxwBwAAAGDADHcAAAAABsxwBwAAAGDADHcAAAAABmyi4U4p5cWllGdKKfs77gdoIJvQT7IJ\n/SSb0E+yCWs36Zk735nkapeNAKsim9BPsgn9JJvQT7IJa7TicKeU8tlJXp3kHd23A0xKNqGfZBP6\nSTahn2QTpmOSM3d+IMk3dt0I0Ew2oZ9kE/pJNqGfZBOmYG40Gt32i6WUr07yilrr95ZSjia5Ums9\nvdyGly5dGm3ZsmWqTcJQzM3NZTQazXV9P7IJbWQT+kk2oZ/6mk25hNw2lysNd348yXySv0zy8iR/\nluShWuu52244N3f7DW9hNBplbm7ynxt79+5t2b7Z9u3bm+oPHTqU48ePT1x/+PDh1pY61fr4J8nJ\nkyc76mZscXFx4trWxz/p/u9gnX4R9i6bXdu4cWNT/eLiYjZt2tRUP3T33ntvp/tfvHhx4tq+PX+S\nOzebrdlpdfDgwab6I0eO5JFHHpm4fs+ePa0tNdm8eXNT/YYNG3L9+vVO76PVtWvXJq6Vzf5ks29a\n+2/5HbsaTzzxRFP99u3bc+HChY66WZ0HHnhg4tqrV6/m7rvvbtq/62OXPmaz61zu3r27ZftmCwsL\nne7/2GOPdbr//v37m9e0/h0sN5+YhgcffLCp/tSpU01rTp8+3dhRm+VyeddyC2utr3/uzzdMUm/7\nSxBYH7IJ/SSb0E+yCf0kmzA9k75bFgAAAAA9tOyZOzeqtR7tsA9glWQT+kk2oZ9kE/pJNmFtnLkD\nAAAAMGCGOwAAAAADZrgDAAAAMGCGOwAAAAADZrgDAAAAMGCGOwAAAAADZrgDAAAAMGB3zbqBVouL\ni53uv3379nVZ05VNmzZ1vqbr7/fMmTNN9V0/J2Aotm3b1un+Fy9e7HR/unH06NFO93/44Yeb1xw5\ncqSDTlZnz549TfULCwt54xvf2LTm2rVrTfUwBF0ffz3wwANN9VevXm1ec/Lkyab6VocOHeq0/vDh\nw031rOz69eu923/Dhg0Tr2v9/dRqtceafTqGXFhYaKo/depU85pZceYOAAAAwIAZ7gAAAAAMmOEO\nAAAAwIAZ7gAAAAAMmOEOAAAAwIAZ7gAAAAAMmOEOAAAAwIDdtVJBKWVnkjNJ/tPSTU/XWr++y6aA\nlckm9I9cQj/JJvSTbML0rDjcWfLztdbXddoJsBqyCf0jl9BPsgn9JJswBV6WBQAAADBgk5658+pS\nyk8luTvJI7XWJzrsCZicbEL/yCX0k2xCP8kmTMHcaDRatqCU8l8k+fwkjyeZT/KuJH+r1vrnt6q/\ndOnSaMuWLdPuEwZhbm4uo9Fobj3uSzZhcuuVzdZcJrLJnU02oZ/6mk25hNw2lysOd25WSvmVJK+v\ntT57yw3n5po2HI1GmZub/OfGrl27WrZvdujQoab6Xbt25dy5cxPXP/DAA60tNdm0aVNT/dWrV3P3\n3Xc3rXniiW6H6WfOnJm49tixYzl8+HDT/sePH29tqcl6DXduNutsdm3jxo1N9YuLi015WFxcbG2p\ndx588MFO9z99+vTEtX17/iSzyeZKuUy6z+aJEydatm/28MMPd7p/1/bs2dNUv7Cw0Lzm7NmzTfVd\nks2xPmSzb/rW/3oc0548ebKpvtXly5cnrj106FDzMWrrMXCrPmaz61zu3LmzZftmCwsLzWs2bNiQ\n69evT1zbpaeeeqp5zdatW5vWbd26tfk+WrT+bGn9N8W1a9daW2qyXC5XvOZOKeUNpZRvXvrzy5J8\nSpLfnV57wGrIJvSPXEI/ySb0k2zC9ExyzZ2fSvJjpZTdSV6U5GuXO4UVWDeyCf0jl9BPsgn9JJsw\nJSsOd2qtH0zy5evQC9BANqF/5BL6STahn2QTpsdboQMAAAAMmOEOAAAAwIAZ7gAAAAAMmOEOAAAA\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f9a9dd3cba8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "eXYqXgrvlOpG",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(digits.data, digits.target, test_size=0.25, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Pl5_yYhJpZYJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "# all parameters not specified are set to their defaults\n",
        "logisticRegr = LogisticRegression()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "s8iRTW2GphRr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "7cd33497-c3d2-4171-f30b-82cdc7b802a5"
      },
      "cell_type": "code",
      "source": [
        "logisticRegr.fit(x_train, y_train)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
            "  FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:460: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\n",
            "  \"this warning.\", FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "          intercept_scaling=1, max_iter=100, multi_class='warn',\n",
              "          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n",
              "          tol=0.0001, verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "metadata": {
        "id": "sqtPeDcygpZ6",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import os, cv2, itertools\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4Mfo9ha7pjHo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "a9115e8f-9422-4662-9982-bea411fb1ddd"
      },
      "cell_type": "code",
      "source": [
        "logisticRegr.fit(x_train, y_train)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
            "  FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:460: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\n",
            "  \"this warning.\", FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "          intercept_scaling=1, max_iter=100, multi_class='warn',\n",
              "          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n",
              "          tol=0.0001, verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "metadata": {
        "id": "ZHvZarwtpYpb",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "predictions = logisticRegr.predict(x_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "76H-QkNgq0ZW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ca5b309d-8862-4581-b555-76fbf6fcc834"
      },
      "cell_type": "code",
      "source": [
        "score = logisticRegr.score(x_test, y_test)\n",
        "print(score)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9533333333333334\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "tZkK3VSGq_XV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn import metrics"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "U2Q9N-HvrdA7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "b5b13433-dfab-4e8c-ad2c-b07a555cb6fc"
      },
      "cell_type": "code",
      "source": [
        "cm = metrics.confusion_matrix(y_test, predictions)\n",
        "print(cm)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[37  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 39  0  0  0  0  2  0  2  0]\n",
            " [ 0  0 41  3  0  0  0  0  0  0]\n",
            " [ 0  0  1 43  0  0  0  0  0  1]\n",
            " [ 0  0  0  0 38  0  0  0  0  0]\n",
            " [ 0  1  0  0  0 47  0  0  0  0]\n",
            " [ 0  0  0  0  0  0 52  0  0  0]\n",
            " [ 0  1  0  1  1  0  0 45  0  0]\n",
            " [ 0  3  1  0  0  0  0  0 43  1]\n",
            " [ 0  0  0  1  0  1  0  0  1 44]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "R4imaKOYrY0W",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "outputId": "5c23cb41-7b1a-411f-f25c-54d9e477329e"
      },
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(9,9))\n",
        "sns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\n",
        "plt.ylabel('Actual label');\n",
        "plt.xlabel('Predicted label');\n",
        "all_sample_title = 'Accuracy Score: {0}'.format(score)\n",
        "plt.title(all_sample_title, size = 15);"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nsgsAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f9a9df41470>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "lVc-O6y3rhvQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1200
        },
        "outputId": "36b17fc0-2bb2-4b73-a846-3ea56c11fcd7"
      },
      "cell_type": "code",
      "source": [
        "#https://towardsdatascience.com/logistic-regression-using-python-sklearn-numpy-mnist-handwriting-recognition-matplotlib-a6b31e2b166a\n",
        "from sklearn.datasets import fetch_mldata\n",
        "mnist = fetch_mldata('MNIST original')"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:77: DeprecationWarning: Function fetch_mldata is deprecated; fetch_mldata was deprecated in version 0.20 and will be removed in version 0.22\n",
            "  warnings.warn(msg, category=DeprecationWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:77: DeprecationWarning: Function mldata_filename is deprecated; mldata_filename was deprecated in version 0.20 and will be removed in version 0.22\n",
            "  warnings.warn(msg, category=DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "error",
          "ename": "HTTPError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-3ba7b9c02a3b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatasets\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfetch_mldata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmnist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfetch_mldata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'MNIST original'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m             \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategory\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDeprecationWarning\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0mwrapped\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_doc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrapped\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/datasets/mldata.py\u001b[0m in \u001b[0;36mfetch_mldata\u001b[0;34m(dataname, target_name, data_name, transpose_data, data_home)\u001b[0m\n\u001b[1;32m    131\u001b[0m         \u001b[0murlname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMLDATA_BASE_URL\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mquote\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m             \u001b[0mmldata_url\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0murlopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murlname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    134\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mHTTPError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m404\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(url, data, timeout, cafile, capath, cadefault, context)\u001b[0m\n\u001b[1;32m    221\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0mopener\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_opener\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 223\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mopener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    224\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    225\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minstall_opener\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    530\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mprocessor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess_response\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    531\u001b[0m             \u001b[0mmeth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocessor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 532\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmeth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    534\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36mhttp_response\u001b[0;34m(self, request, response)\u001b[0m\n\u001b[1;32m    640\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m200\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m300\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    641\u001b[0m             response = self.parent.error(\n\u001b[0;32m--> 642\u001b[0;31m                 'http', request, response, code, msg, hdrs)\n\u001b[0m\u001b[1;32m    643\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    644\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36merror\u001b[0;34m(self, proto, *args)\u001b[0m\n\u001b[1;32m    568\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhttp_err\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    569\u001b[0m             \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'default'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'http_error_default'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0morig_args\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 570\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_chain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    571\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    572\u001b[0m \u001b[0;31m# XXX probably also want an abstract factory that knows when it makes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhandler\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhandlers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    505\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36mhttp_error_default\u001b[0;34m(self, req, fp, code, msg, hdrs)\u001b[0m\n\u001b[1;32m    648\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mHTTPDefaultErrorHandler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBaseHandler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    649\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mhttp_error_default\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhdrs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 650\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfull_url\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhdrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    651\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    652\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mHTTPRedirectHandler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBaseHandler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mHTTPError\u001b[0m: HTTP Error 500: Internal Server Error"
          ]
        }
      ]
    },
    {
      "metadata": {
        "id": "h-mWWVwlrq0J",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "gQSOjTRArrKq",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "elhzJbSZrrHr",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "erqKrTI0rrDv",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "e7ZzLz2vrq_k",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "3eT9nlNurq6z",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "OsP3mQ9Og6Hj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        },
        "outputId": "5632b0eb-db30-4ebb-eb8a-2d6344c33b80"
      },
      "cell_type": "code",
      "source": [
        "!pip install -q kaggle-cli\n",
        "!kg download -u 'stanimman' -p '****' -c 'dogs-vs-cats-redux-kernels-edition'"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/mechanicalsoup/browser.py:37: UserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n",
            "\n",
            "The code that caused this warning is on line 37 of the file /usr/local/lib/python3.6/dist-packages/mechanicalsoup/browser.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n",
            "\n",
            "  response.content, **soup_config)\n",
            "downloading https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/download/test.zip\n",
            "\n",
            "test.zip 100% |######################################| Time: 0:00:09  29.5 MiB/s\n",
            "\n",
            "downloading https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/download/train.zip\n",
            "\n",
            "train.zip 100% |#####################################| Time: 0:00:24  22.4 MiB/s\n",
            "\n",
            "downloading https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/download/sample_submission.csv\n",
            "\n",
            "sample_submission.csv 100% |#########################| Time: 0:00:00 123.7 KiB/s\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "co1tjnDYro2g",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "J_J7_9UHrqA5",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "43aaMs1ShhEW",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!unzip -q train.zip"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Z2do9Hs_iC2f",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!unzip -q test.zip"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "PSnFp9OqhtdN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 731
        },
        "outputId": "6e95506b-1c06-4fa9-c9cf-939da75c85c0"
      },
      "cell_type": "code",
      "source": [
        "TRAIN_DIR = 'train/'\n",
        "TEST_DIR = 'test/'\n",
        "\n",
        "ROWS = 64\n",
        "COLS = 64\n",
        "CHANNELS = 3\n",
        "\n",
        "train_images = [TRAIN_DIR+i for i in os.listdir(TRAIN_DIR)] # use this for full dataset\n",
        "test_images =  [TEST_DIR+i for i in os.listdir(TEST_DIR)]\n",
        "\n",
        "\n",
        "# Sample from train and test data.\n",
        "\"\"\"\n",
        "sample_size = 5000\n",
        "train_dogs =   [TRAIN_DIR+i for i in os.listdir(TRAIN_DIR) if 'dog' in i]\n",
        "train_cats =   [TRAIN_DIR+i for i in os.listdir(TRAIN_DIR) if 'cat' in i]\n",
        "train_images = np.hstack([np.random.choice(train_dogs, sample_size, replace=False),\n",
        "                          np.random.choice(train_cats, sample_size, replace=False)])\n",
        "\n",
        "test_images =  test_images[:sample_size]\n",
        "\"\"\"\n",
        "\n",
        "def read_image(file_path):\n",
        "    img = cv2.imread(file_path, cv2.IMREAD_COLOR) #cv2.IMREAD_GRAYSCALE\n",
        "    return cv2.resize(img, (ROWS, COLS), interpolation=cv2.INTER_CUBIC)\n",
        "\n",
        "\n",
        "def prep_data(images):\n",
        "    \"\"\"\n",
        "    Returns:\n",
        "        X(n_x, m)\n",
        "        y(1, m) -- 1: dog, 0: cat\n",
        "    \"\"\"\n",
        "    m = len(images)\n",
        "    n_x = ROWS * COLS * CHANNELS\n",
        "    \n",
        "    X = np.ndarray((n_x, m), dtype=np.uint8)\n",
        "    y = np.zeros((1, m))\n",
        "    print (\"X shape is {}\".format(X.shape))\n",
        "    \n",
        "    for i, image_file in enumerate(images):\n",
        "        image = read_image(image_file)\n",
        "        X[:, i] = np.squeeze(image.reshape((n_x, 1)))\n",
        "        if 'dog' in image_file.lower():\n",
        "            y[0, i] = 1\n",
        "        elif 'cat' in image_file.lower():\n",
        "            y[0, i] = 0\n",
        "        else:# if neither dog nor cat exist, return the image index (this is the case for test data)\n",
        "            y[0, i] = image_file.split('/')[-1].split('.')[0]\n",
        "        if i%1000 == 0: print('Processed {} of {}'.format(i, m))\n",
        "    \n",
        "    return X, y\n",
        "\n",
        "X_train, y_train = prep_data(train_images)\n",
        "X_test, test_idx = prep_data(test_images)\n",
        "\n",
        "print(\"Train shape: {}\".format(X_train.shape))\n",
        "print(\"Test shape: {}\".format(X_test.shape))"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X shape is (12288, 25000)\n",
            "Processed 0 of 25000\n",
            "Processed 1000 of 25000\n",
            "Processed 2000 of 25000\n",
            "Processed 3000 of 25000\n",
            "Processed 4000 of 25000\n",
            "Processed 5000 of 25000\n",
            "Processed 6000 of 25000\n",
            "Processed 7000 of 25000\n",
            "Processed 8000 of 25000\n",
            "Processed 9000 of 25000\n",
            "Processed 10000 of 25000\n",
            "Processed 11000 of 25000\n",
            "Processed 12000 of 25000\n",
            "Processed 13000 of 25000\n",
            "Processed 14000 of 25000\n",
            "Processed 15000 of 25000\n",
            "Processed 16000 of 25000\n",
            "Processed 17000 of 25000\n",
            "Processed 18000 of 25000\n",
            "Processed 19000 of 25000\n",
            "Processed 20000 of 25000\n",
            "Processed 21000 of 25000\n",
            "Processed 22000 of 25000\n",
            "Processed 23000 of 25000\n",
            "Processed 24000 of 25000\n",
            "X shape is (12288, 12500)\n",
            "Processed 0 of 12500\n",
            "Processed 1000 of 12500\n",
            "Processed 2000 of 12500\n",
            "Processed 3000 of 12500\n",
            "Processed 4000 of 12500\n",
            "Processed 5000 of 12500\n",
            "Processed 6000 of 12500\n",
            "Processed 7000 of 12500\n",
            "Processed 8000 of 12500\n",
            "Processed 9000 of 12500\n",
            "Processed 10000 of 12500\n",
            "Processed 11000 of 12500\n",
            "Processed 12000 of 12500\n",
            "Train shape: (12288, 25000)\n",
            "Test shape: (12288, 12500)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "F4eQuJyhiv7Q",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "classes = {0:'cat',\n",
        "           1:'dog'}\n",
        "def show_image(X, y, idx):\n",
        "    image = X[idx]\n",
        "    image = image.reshape((ROWS, COLS, CHANNELS))\n",
        "    plt.figure(figsize=(4,2))\n",
        "    plt.imshow(image)\n",
        "    plt.title(\"This is a {}\".format(classes[y[idx,0]]))\n",
        "    plt.show()\n",
        "    \n",
        "def show_image_prediction(X, idx, model):\n",
        "    image = X[idx].reshape(1, -1)\n",
        "    image_class = classes[model.predict(image).item()]\n",
        "    image = image.reshape((ROWS, COLS, CHANNELS))\n",
        "    plt.figure(figsize=(4,2))\n",
        "    plt.imshow(image)\n",
        "    plt.title(\"Test {}: I think this is a {}\".format(idx, image_class))\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "KvF0VFChjTxK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 172
        },
        "outputId": "3829eb0f-6aa7-4a1a-b2d9-9e0ba8e7be89"
      },
      "cell_type": "code",
      "source": [
        "show_image(X_train.T, y_train.T, 3)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nVCZWuv0AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f9aa1fb3d30>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "UaO6gDQNjh5v",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2597
        },
        "outputId": "28c44480-259f-41ef-b13e-61267b9b3940"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegressionCV\n",
        "from sklearn.metrics import confusion_matrix\n",
        "clf = LogisticRegressionCV()\n",
        "X_train_lr, y_train_lr = X_train.T, y_train.T.ravel()\n",
        "clf.fit(X_train_lr, y_train_lr)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:2053: FutureWarning: You should specify a value for 'cv' instead of relying on the default value. The default value will change from 3 to 5 in version 0.22.\n",
            "  warnings.warn(CV_WARNING, FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:758: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n",
            "  \"of iterations.\", ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:758: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n",
            "  \"of iterations.\", ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:758: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n",
            "  \"of iterations.\", ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:758: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n",
            "  \"of iterations.\", ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:758: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n",
            "  \"of iterations.\", ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:758: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n",
            "  \"of iterations.\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-98282e189095>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegressionCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mX_train_lr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_lr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_lr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_lr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1791\u001b[0m                       \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1792\u001b[0m                       )\n\u001b[0;32m-> 1793\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miter_encoded_labels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1794\u001b[0m             for train, test in folds)\n\u001b[1;32m   1795\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    915\u001b[0m             \u001b[0;31m# remaining jobs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    916\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 917\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    918\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    757\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    758\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 759\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    760\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    761\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    714\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    715\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 716\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    717\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    718\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    547\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    548\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 549\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 225\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 225\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36m_log_reg_scoring_path\u001b[0;34m(X, y, train, test, pos_class, Cs, scoring, fit_intercept, max_iter, tol, class_weight, verbose, solver, penalty, dual, intercept_scaling, multi_class, random_state, max_squared_sum, sample_weight)\u001b[0m\n\u001b[1;32m    957\u001b[0m         \u001b[0mintercept_scaling\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mintercept_scaling\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    958\u001b[0m         \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_squared_sum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_squared_sum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 959\u001b[0;31m         sample_weight=sample_weight)\n\u001b[0m\u001b[1;32m    960\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    961\u001b[0m     \u001b[0mlog_reg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msolver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msolver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_class\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmulti_class\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36mlogistic_regression_path\u001b[0;34m(X, y, pos_class, Cs, fit_intercept, max_iter, tol, verbose, solver, coef, class_weight, dual, penalty, intercept_scaling, multi_class, random_state, check_input, max_squared_sum, sample_weight)\u001b[0m\n\u001b[1;32m    753\u001b[0m                 \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfprime\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    754\u001b[0m                 \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mC\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 755\u001b[0;31m                 iprint=iprint, pgtol=tol, maxiter=max_iter)\n\u001b[0m\u001b[1;32m    756\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"warnflag\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m                 warnings.warn(\"lbfgs failed to converge. Increase the number \"\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/lbfgsb.py\u001b[0m in \u001b[0;36mfmin_l_bfgs_b\u001b[0;34m(func, x0, fprime, args, approx_grad, bounds, m, factr, pgtol, epsilon, iprint, maxfun, maxiter, disp, callback, maxls)\u001b[0m\n\u001b[1;32m    197\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m     res = _minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds,\n\u001b[0;32m--> 199\u001b[0;31m                            **opts)\n\u001b[0m\u001b[1;32m    200\u001b[0m     d = {'grad': res['jac'],\n\u001b[1;32m    201\u001b[0m          \u001b[0;34m'task'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'message'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/lbfgsb.py\u001b[0m in \u001b[0;36m_minimize_lbfgsb\u001b[0;34m(fun, x0, args, jac, bounds, disp, maxcor, ftol, gtol, eps, maxfun, maxiter, iprint, callback, maxls, **unknown_options)\u001b[0m\n\u001b[1;32m    333\u001b[0m             \u001b[0;31m# until the completion of the current minimization iteration.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    334\u001b[0m             \u001b[0;31m# Overwrite f and g:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 335\u001b[0;31m             \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc_and_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    336\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mtask_str\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb'NEW_X'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    337\u001b[0m             \u001b[0;31m# new iteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/lbfgsb.py\u001b[0m in \u001b[0;36mfunc_and_grad\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    283\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mfunc_and_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 285\u001b[0;31m             \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    286\u001b[0m             \u001b[0mg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjac\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/optimize.py\u001b[0m in \u001b[0;36mfunction_wrapper\u001b[0;34m(*wrapper_args)\u001b[0m\n\u001b[1;32m    291\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfunction_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mwrapper_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m         \u001b[0mncalls\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 293\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrapper_args\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    294\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mncalls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunction_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/optimize.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, x, *args)\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0mfg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjac\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfg\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfg\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36m_logistic_loss_and_grad\u001b[0;34m(w, X, y, alpha, sample_weight)\u001b[0m\n\u001b[1;32m    111\u001b[0m     \u001b[0mgrad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m     \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_intercept_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36m_intercept_dot\u001b[0;34m(w, X, y)\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0mw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mw\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m     \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m     \u001b[0myz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mz\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myz\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/extmath.py\u001b[0m in \u001b[0;36msafe_sparse_dot\u001b[0;34m(a, b, dense_output)\u001b[0m\n\u001b[1;32m    171\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    172\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 173\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    174\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "metadata": {
        "id": "xPE-5HbRjyHU",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "nwYF0E3Sjiy4"
      },
      "cell_type": "markdown",
      "source": [
        "### GitHub\n",
        "\n",
        "For a full discussion of interactions between Colab and GitHub, see [Using Colab with GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb). As a brief summary:\n",
        "\n",
        "To save a copy of your Colab notebook to Github, select *File → Save a copy to GitHub…*\n",
        "\n",
        "To load a specific notebook from github, append the github path to http://colab.research.google.com/github/.\n",
        "For example to load this notebook in Colab: [https://github.com/tensorflow/docs/blob/master/site/en/tutorials/_index.ipynb](https://github.com/tensorflow/docs/blob/master/site/en/tutorials/_index.ipynb) use the following Colab URL: [https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/_index.ipynb](https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/_index.ipynb)\n",
        "\n",
        "To open a github notebook in one click, we recommend installing the [Open in Colab Chrome Extension](https://chrome.google.com/webstore/detail/open-in-colab/iogfkhleblhcpcekbiedikdehleodpjo).\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "ljiIDiHmjKD5",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "yv2XIwi5hQ_g"
      },
      "cell_type": "markdown",
      "source": [
        "### Visualization"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "rYs5mx2JZkmy"
      },
      "cell_type": "markdown",
      "source": [
        "Colaboratory includes widely used libraries like [matplotlib](https://matplotlib.org/), simplifying visualization."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xqrc5C-IaA5J",
        "outputId": "3460cc84-faf8-4d8c-a4e6-96a6809c389a",
        "colab": {
          "height": 360
        }
      },
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x = np.arange(20)\n",
        "y = [x_i + np.random.randn(1) for x_i in x]\n",
        "a, b = np.polyfit(x, y, 1)\n",
        "_ = plt.plot(x, y, 'o', np.arange(20), a*np.arange(20)+b, '-')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x562d64cf1b10>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "AN_LRQ9NkOjs"
      },
      "cell_type": "markdown",
      "source": [
        "Want to use a new library?  `pip install` it at the top of the notebook. Then that library can be used anywhere else in the notebook. For recipes to import commonly used libraries, refer to the [importing libraries example notebook](/notebooks/snippets/importing_libraries.ipynb)."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "FlQq0SUepQbd",
        "outputId": "6e404831-3336-4633-b76f-c6313ecdd356",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        }
      },
      "cell_type": "code",
      "source": [
        "!pip install -q matplotlib-venn\n",
        "\n",
        "from matplotlib_venn import venn2\n",
        "_ = venn2(subsets = (3, 2, 1))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nxIiISFn/H6CFJPx9gio9AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f48ff99ff10>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "LxZ3dPzYnyNF"
      },
      "cell_type": "markdown",
      "source": [
        "### Forms\n",
        "\n",
        "Forms can be used to parameterize code. See the [forms example notebook](/notebooks/forms.ipynb) for more details."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "FQ_Hx_9tn7uF",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "#@title Examples\n",
        "\n",
        "text = 'value' #@param \n",
        "date_input = '2018-03-22' #@param {type:\"date\"}\n",
        "number_slider = 0 #@param {type:\"slider\", min:-1, max:1, step:0.1}\n",
        "dropdown = '1st option' #@param [\"1st option\", \"2nd option\", \"3rd option\"]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "rTX3heEtu0b2"
      },
      "cell_type": "markdown",
      "source": [
        "### Local runtime support\n",
        "\n",
        "Colab  supports connecting to a Jupyter runtime on your local machine. For more information, see our [documentation](https://research.google.com/colaboratory/local-runtimes.html)."
      ]
    }
  ]
}